## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
y <- diamond$price; x <- diamond$carat; n <- length(y)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
data(mtcars)
summary(lm(mpg~wt, data = mtcars))
carslm=lm(mpg~wt, data = mtcars)
confint(carslm)
predict(carslm, data.frame=(x=mean(mtcars$wt), interval="confidence"))
predict(carslm, data.frame=(x=mean(mtcars$wt)), interval="confidence"))
predict(carslm, data.frame=(x=mean(mtcars$wt)), interval="confidence")
predict(carslm, data.frame=(wt=mean(mtcars$wt)), interval="confidence")
predict(carslm, data.frame=(wt=mean(mtcars$wt)), interval="prediction")
mean(ca)
mean(mtcars$wt)
wtmean= mean(mtcars$wt)
predict(carslm, data.frame=(wt=wtmean, interval="prediction")
predict(carslm, data.frame=(wt=wtmean), interval="prediction")
confint(carslm)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
wtmean= mean(mtcars$wt)
wtmean
carslm=lm(mpg~wt, data = mtcars)
wtmean= mean(mtcars$wt)
summary(carslm)
confint(carslm)
predict(carslm, data.frame=(wt=wtmean), interval="prediction")
?predict.lm
data.frame=(wt=wtmean)
(data.frame=(wt=wtmean))
(wtmean= data.frame(mean(mtcars$wt))
0
(wtmean= data.frame(mean(mtcars$wt)))
predict(carslm, newdata=wtmean, interval="prediction")
predict(carslm, newdata=wtmean, interval="confidence")
plot(predict(carslm), rstudent(carslm))
plot(mtcars$wt, mtcars&mpg)
mtcars[ , c("wt","mpg")]
mean(mtcars$mpg)
?mtcars
predict(carslm, newdata=data.frame(c("3")), interval="confidence")
predict(carslm, newdata=data.frame(c("3")), interval="prediction")
predict(carslm, newdata=data.frame(wt=c("3")), interval="prediction")
predict(carslm, newdata=data.frame(wt=3), interval="prediction")
(wtmean= data.frame(wt=mean(mtcars$wt)))
predict(carslm, newdata=wtmean, interval="confidence")
predict(carslm, newdata=wtmean, interval="prediction")
predict(carslm, newdata=data.frame(wt=3), interval="prediction")
(cars.fit2 = lm(mpg ~ I(wt/2), data =mtcars))
summary(cars.fit2)
cars.fit2$coef
summary(cars.fit2)$coefficients
cars.fit2$coefficients
summary(cars.fit2)$coefficients
(cars.fit2.coef = summary(cars.fit2)$coefficients)
cars.fit2$df
confint(cars.fit2)
(cars.fit2.coef = summary(cars.fit2)$coefficients)
confint(cars.fit2)
summary(cars.fit2)
cars.fit2$residuals
cars.fit3 = lm(mpg~ 1, data=mtcars)
sum(cars.fit2$residuals ^2)/sum(cars.fit3$residuals ^2)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
data(mtcars)
fit1 = lm(mpg ~ am, data=mtcars)
summary(fit1)
View(mtcars)
mean(mtcars[am==1,]$mpg)
mean(mtcars[mtcars$am==1,]$mpg)
mean(mtcars[mtcars$am==0,]$mpg)
fit.n = lm(mpg ~ ., data=mtcars)
summary(fit.n)
fit.2 = lm(mpg~wt+am)
fit.2 = lm(mpg~wt+am, data=mtcars)
symmary(fit.2)
summary(fit.2)
fit.3 = lm(mpg~disp+am, data=mtcars)
summary(fit.3)
?sapply
?apply
c = mtcars
c$cyl = as.factor(c$cyl)
c$am = as.factor(c$am)
?as.factor
levels(c$am) = c("automatic", "manual")
View(c)
?cor
cor(c)
cor(c[,-1])
cor(c[,-2:3])
cor(c[,2:3])
cor(c[2:3])
cor(c[,c("hp","qsec")])
cor(c[,c("hp","qsec","wt")])
rcorr(c[,c("hp","qsec","wt")])
library(Hmisc)
rcorr(c[,c("hp","qsec","wt")])
pairs(c[,c("hp","qsec","wt")])
cor(c[,c("hp","qsec","wt")])
cor(c[,c("hp","qsec","wt", "mpg")])
pairs(c[,c("hp","qsec","wt", "mpg")])
pairs(c[,c("hp","wt", "mpg")])
c.fit1 = lm(mpg~cyl+wt, data=c)
summary(c.fit1)
pairs(c[,c("hp","wt", "mpg", "am")])
pairs(c[,c("hp","wt", "mpg")])
c.fit2 = lm(mpg~cyl, data=c)
summary(c.fit2)
anova(c.fit2, c.fit1)
c.fit3 = lm(mpg~cyl*wt, data=c)
summary(c.fit3)
anova(c.fit1, c.fit3)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
summary(lm(mpg ~ wt + factor(cyl), data = mtcars))
x1 <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y1 <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y1~x1))
?max
max(hatvalues(lm(y1~x1)))
dfbeta(lm(y2~x2))
x2 <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y2 <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbeta(lm(y2~x2))
fit2 <- lm(y2~y1)
hatvalues(fit2))
hatvalues(fit2)
max(hatvalues(fit2))
dfbeta(fit2)
fit2 <- lm(y2~y1)
dfbeta(fit2)
dfbeta(lm(y2~x2))
fit2
fit2 <- lm(y2~x1)
max(hatvalues(fit2))
dfbeta(fit2)
dfbetas(fit2)
?dfbetas
setwd("d:/dev/app/gitrepo/mtCars")
setwd("d:/dev/app/gitrepo/mtCars")
library(ggplot2)
library(car)
library(leaps)
library(gvlma)
#library(psych)
#library(pastecs)
# preparing the data set
mtcars$am <- factor(mtcars$am, labels =c("automatic","manual"))
mtcars$gear <- as.factor(mtcars$gear)
mtcars$cyl <- as.factor(mtcars$cyl)
table(mtcars$am)
car.full <- regsubsets(mpg ~., data = mtcars)
car.sum <-summary(car.full)
car.sum$which[1:4, 5:10]
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + hp, data = mtcars)
car.fit3 <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
mt <- mtcars
mt.fit <- lm(mpg ~ wt + qsec + am, data = mtcars)
mt$residuals<-resid(mt.fit)
mt$standardized.residuals <- rstandard(mt.fit)
mt$studentized.residuals <- rstudent(mt.fit)
mt$cooks.distance<-cooks.distance(mt.fit)
mt$dfbeta <- dfbeta(mt.fit)
mt$dffit <- dffits(mt.fit)
mt$leverage <- hatvalues(mt.fit)
mt$covariance.ratios <- covratio(mt.fit)
contrasts(mt$am)
summary(mt.fit)
vif(mt.fit)
outlierTest(mt.fit)
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
type = "l")
plot(car.sum$bic, xlab = "# of variables in regression",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
type = "l")
plot(car.sum$bic, xlab = "# of variables in regression",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection"
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection"
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection"
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection"
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "Weight (lb/1000")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection",
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "MPG (miles per gallon)")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection",
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
scatterplotMatrix( ~ qsec + wt + mpg + disp  + hp | am , data = mtcars,
spread = FALSE,
smoother.args = list(lty=2, lwd =.5),
main = "Scatterplot for key variables in mtcars",
legend.pos ="bottomleft")
scatterplot(mpg ~ wt | am, data = mtcars,
spread = TRUE,
smoother = loessLine,
smoother.args = list(lty=2, lwd =1, degree=1),
main ="MPG vs Weight by transmission type",
boxplot = "xy",
grid = TRUE)
qqPlot(mt.fit)
avPlots(mt.fit)
influencePlot(mt.fit)
getwd()
library(rmarkdown)
library(RCurl)
library(bitops)
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + qsec, data = mtcars)
car.fit3 <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + hp, data = mtcars)
car.fit3 <- lm(mpg ~ wt + hp + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + qsec, data = mtcars)
car.fit3 <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + hp, data = mtcars)
car.fit3 <- lm(mpg ~ wt + hp + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + qsec, data = mtcars)
car.fit3 <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
car.fit1 <- lm(mpg ~ wt, data = mtcars)
car.fit2 <- lm(mpg ~ wt + qsec, data = mtcars)
car.fit3 <- lm(mpg ~ wt + qsec + am, data = mtcars)
anova(car.fit1, car.fit2, car.fit3)
confint(car.fit3)
contrasts(mt$am)
summary(mt.fit)
vif(mt.fit)
outlierTest(mt.fit)
qqPlot(mt.fit)
avPlots(mt.fit)
influencePlot(mt.fit)
qqPlot(mt.fit)
outlierTest(mt.fit)
vif(mt.fit)
scatterplot(mpg ~ wt | am, data = mtcars,
spread = TRUE,
smoother = loessLine,
smoother.args = list(lty=2, lwd =1, degree=1),
main ="MPG vs Weight by transmission type",
boxplot = "xy",
grid = TRUE)
mt$fitted.values <- mt.fit$fitted.values
head(mt)
qqplot.resid <- qplot(sample = mt$studentized.residuals, stat="qq") + labs(x = "Theoretical Values", y = "Observed Values")
qqplot.resid
scatter <- ggplot(mt, aes(fitted, studentized.residuals))
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red")+ labs(x = "Fitted Values", y = "Studentized Residual")
scatter <- ggplot(mt, aes(fitted.values, studentized.residuals))
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red")+ labs(x = "Fitted Values", y = "Studentized Residual")
histogram<-ggplot(mt, aes(studentized.residuals)) + theme(legend.position = "none") + geom_histogram(aes(y=..density..), colour="black", fill="white") + labs(x = "Studentized Residual", y = "Density")
histogram + stat_function(fun = dnorm, args = list(mean = mean(mt$studentized.residuals, na.rm = TRUE), sd = sd(mt$studentized.residuals, na.rm = TRUE)), colour = "red", size = 1)
histogram<-ggplot(mt, aes(studentized.residuals)) + theme(legend.position = "none", plot.title ="title") + geom_histogram(aes(y=..density..), colour="black", fill="white") + labs(x = "Studentized Residual", y = "Density")
histogram + stat_function(fun = dnorm, args = list(mean = mean(mt$studentized.residuals, na.rm = TRUE), sd = sd(mt$studentized.residuals, na.rm = TRUE)), colour = "red", size = 1)
scatter <- ggplot(mt, aes(fitted.values, studentized.residuals))
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red")+ labs(x = "Fitted Values", y = "Studentized Residual")
qqplot.resid <- qplot(sample = mt$studentized.residuals, stat="qq") + labs(x = "Theoretical Values", y = "Observed Values")
qqplot.resid
qqPlot(mt.fit)
influencePlot(mt.fit)
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "MPG (miles per gallon)")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection",
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
qqPlot(mt.fit)
#avPlots(mt.fit)
influencePlot(mt.fit)
# histogram<-ggplot(mt, aes(studentized.residuals)) +
#          theme(legend.position = "none") +
#          geom_histogram(aes(y=..density..), colour="black", fill="white") +
#          labs(x = "Studentized Residual", y = "Density")
# histogram + stat_function(fun = dnorm,
#                           args = list(mean = mean(mt$studentized.residuals, na.rm = TRUE), sd = sd(mt$studentized.residuals, na.rm = TRUE)), colour = "red", size = 1)
scatter <- ggplot(mt, aes(fitted.values, studentized.residuals))
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red")+ labs(x = "Fitted Values", y = "Studentized Residual")
# qqplot.resid <- qplot(sample = mt$studentized.residuals, stat="qq") + labs(x = "Theoretical Values", y = "Observed Values")
# qqplot.resid
par(mfrow=c(2,2))
qqPlot(mt.fit)
#avPlots(mt.fit)
influencePlot(mt.fit)
scatter <- ggplot(mt, aes(fitted.values, studentized.residuals))
scatter + geom_point() + geom_smooth(method = "lm", colour = "Red")+ labs(x = "Fitted Values", y = "Studentized Residual")
qqPlot(mt.fit)
influencePlot(mt.fit)
par(mfrow=c(1,2))
qqPlot(mt.fit)
influencePlot(mt.fit)
par(mfrow=c(2,1))
qqPlot(mt.fit)
influencePlot(mt.fit)
par(mfrow=c(2,2))
plot(mt.fit)
hist(mt$studentized.residuals)
hist(rstudent(mt.fit))
plot(mt.fit$fitted.values,rstandard(mt.fit))
abline(0, 0)
qqPlot(mt.fit)
plot(mt.fit)
par(mfrow=c(1,2))
qqPlot(mt.fit)
influencePlot(mt.fit)
par(mfrow=c(1,1))
qqPlot(mt.fit)
influencePlot(mt.fit)
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
car.sum <- summary(regsubsets(mpg ~., data = mtcars))
car.sum$which[1:4, 5:10]
par(mfrow=c(2,2))
boxplot(mpg ~ am, data=mtcars,
main = "MPG by Type of Transmission",
ylab = "MPG (miles per gallon)")
boxplot(wt ~ am, data=mtcars,
main ="Weight by Type of Transmission",
ylab = "Weight (lb/1000)")
plot(car.sum$adjr2, xlab = "# of variables in regression",
ylab = "Adjusted R square",
main = "Best Subset selection",
type = "l")
plot(car.sum$bic,   xlab = "# of variables in regression",
main = "Best Subset selection",
ylab = "BIC",
type = "l")
plot(mt.fit)
par(mfrow=c(1,1))
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
coef(mt.fit)
coef(mt.fit); confint(mt.fit)
vif(mt.fit)
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
coef(mt.fit); confint(mt.fit); vif(mt.fit)
coef(mt.fit); confint(mt.fit);
vif(mt.fit)
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
?influencePlot
influencePlot(mt.fit, main="test")
influencePlot(mt.fit, main="Influenceplot",
sub = "size of circles represent influence")
influencePlot(mt.fit, main="influencePlot",
sub = "size of circles represent influence")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
car.sum <- summary(regsubsets(mpg ~., data = mtcars));car.sum$which[1:4, 5:10]
names(car.sum)
which.max(car.sum$bic)
which.min(car.sum$bic)
car.sum$which[which.min(car.sum$bic), 5:10]
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
rmarkdown::render("jhu_mtcars_analysis.Rmd", "pdf_document")
library(RCurl)
library(bitops)
